<div class="column post-calendar" id="calendar">
  <div class="boxed-group">
    <h3>
      Contributions
      <span><i class="fa fa-lock"></i></span>
    </h3>
    <div class="calendar-graph">
      <svg width="721" height="110" @mouseout="mouseoverDate=null">
        <g transform="translate(20, 20)">
          <g v-for="week in calendar" :transform="week.transform">
            <rect v-for="day in week.days"
                  :y="day.y" :fill="day.fill"
                  @click="selectedDate=day.date"
                  @mouseover="mouseoverDate=day.date"
                  :class="{active:selectedDate===day.date}"
                  data-count="{{day.posts.length}}"
                  data-date="{{day.date}}"
                  class="day" width="11" height="11"
            ></rect>
          </g>
          <text x="0" y="-5" class="month">Mar</text>
          <text x="65" y="-5" class="month">Apr</text>
          <text x="117" y="-5" class="month">May</text>
          <text x="182" y="-5" class="month">Jun</text>
          <text x="234" y="-5" class="month">Jul</text>
          <text x="286" y="-5" class="month">Aug</text>
          <text x="351" y="-5" class="month">Sep</text>
          <text x="403" y="-5" class="month">Oct</text>
          <text x="455" y="-5" class="month">Nov</text>
          <text x="520" y="-5" class="month">Dec</text>
          <text x="572" y="-5" class="month">Jan</text>
          <text x="637" y="-5" class="month">Feb</text>
          <text text-anchor="middle" class="wday" dx="-10" dy="9"
                style="display: none;">S
          </text>
          <text text-anchor="middle" class="wday" dx="-10" dy="22">M</text>
          <text text-anchor="middle" class="wday" dx="-10" dy=" 35"
                style="display: none;">T
          </text>
          <text text-anchor="middle" class="wday" dx="-10" dy="48">W</text>
          <text text-anchor="middle" class="wday" dx="-10" dy="61"
                style="display: none;">T
          </text>
          <text text-anchor="middle" class="wday" dx="-10" dy="74">F</text>
          <text text-anchor="middle" class="wday" dx="-10" dy="87"
                style="display: none;">S
          </text>
        </g>
      </svg>
      <div class="svg-tip svg-tip-one-line"
           v-bind:style="{ top: svgtip.top, left: svgtip.left, display: svgtip.display}">
        <strong>{{svgtip.text}}</strong> on
        {{moment(mouseoverDate).format('MMM DD, YYYY')}}
      </div>
    </div>
    <div class="calendar-footer">
      <span class="text-muted">Summary of posts in last year. <a href="/">Learn
          how we count contributions.</a></span>
      <div class="calendar-legend">
        <span>Less</span>
        <ul class="legend">
          <li style="background-color: #eee"></li>
          <li style="background-color: #d6e685"></li>
          <li style="background-color: #8cc665"></li>
          <li style="background-color: #44a340"></li>
          <li style="background-color: #1e6823"></li>
        </ul>
        <span>More</span>
      </div>
    </div>
    <div class="calendar-col left">
      <div class="calendar-col-title">
        Contributions in last year
      </div>
      <div class="calendar-col-count">
        {{posts.length}} total
      </div>
      <div class="calendar-col-date">
        {{dateRange.start}} - {{dateRange.end}}
      </div>
    </div>
    <div class="calendar-col mid">
      <div class="calendar-col-title">
        Longest streak
      </div>
      <div class="calendar-col-count">
        {{longestStreak.count}} days
      </div>
      <div class="calendar-col-date">
        {{longestStreak.start}} - {{longestStreak.end}}
      </div>
    </div>
    <div class="calendar-col right">
      <div class="calendar-col-title">
        Current streak
      </div>
      <div class="calendar-col-count">
        {{currentStreak.count}} days
      </div>
      <div class="calendar-col-date">
        Last contributed {{currentStreak.relativeTime}}
      </div>
    </div>
  </div>

  <h3>Contribution activity</h3>
  <div class="contribution-list">
    <ul>
      <li v-for="post in posts | filterBy selectedDate in 'date'">
        <a href="{{post.url}}">{{post.title}}
        </a>
        <span>{{post.date}}</span>
      </li>
    </ul>
  </div>
</div>

<%
var dateFormat = 'YYYY-MM-DD';
var postsArr = [];
var today = moment().format('YYYY-MM-DD');
var oneYearAgo = moment(today).subtract(1, 'years');

site.posts.data.forEach(function(post) {
  if (post.date > oneYearAgo) {
    postsArr.push({
      date: post.date.format(dateFormat),
      title: post.title,
      url: post.permalink
    });
  }
});

postsArr.sort(function(a, b) {
  return new Date(a.date) - new Date(b.date);
});

var longestStreak = getLongestStreak(postsArr);
var latestStreak = getLatestStreak(postsArr);

function getLongestStreak(posts) {
  if (!posts.length) return {count: 0, start: null, end: null};

  var endTemp = 0;
  var lenTemp = 1;
  var endIndex = 0;
  var lenMax = 1;

  for (var i = 0; i < posts.length - 1; i++) {
    var date0 = posts[i].date;
    var date1 = posts[i + 1].date;
    var isContinuousDates = moment(date1).diff(date0, 'days') < 2;

    if (isContinuousDates) {
      lenTemp++;
      endTemp = i + 1;
    } else {
      lenTemp = 1;
    }

    if (lenTemp > lenMax) {
      endIndex = endTemp;
      lenMax = lenTemp;
    }
  }

  var startDate = posts[endIndex - lenMax + 1].date;
  var endDate = posts[endIndex].date;
  var count = moment(endDate).diff(startDate, 'days') + 1;
  return {
    count: count,
    start: moment(startDate).format('MMMM D'),
    end: moment(endDate).format('MMMM D')
  }
}

function getLatestStreak(posts) {
  if (!posts.length) return {count: 0, start: null, end: null};
  posts.reverse();

  var endTemp = 0;
  var lenTemp = 1;
  var endIndex = 0;
  var lenMax = 1;

  for (var i = 0; i < posts.length - 1; i++) {
    var date0 = posts[i].date;
    var date1 = posts[i + 1].date;
    var isContinuousDates = moment(date0).diff(date1, 'days') < 2;

    if (isContinuousDates) {
      lenTemp++;
      endTemp = i + 1;
    } else {
      lenTemp = 1;
      break;
    }

    if (lenTemp > lenMax) {
      endIndex = endTemp;
      lenMax = lenTemp;
    }
  }

  var endDate = posts[endIndex - lenMax + 1].date;
  var startDate = posts[endIndex].date;
  var count = moment(endDate).diff(startDate, 'days') + 1;
  return {
    count: count,
    start: startDate,
    end: endDate
  }
}
%>
<script>
  var posts = <%- JSON.stringify(postsArr) %>;
  var longestStreak = <%- JSON.stringify(longestStreak) %>;
  var latestStreak = <%- JSON.stringify(latestStreak) %>;
  var currentStreak = getCurrentStreak(latestStreak);
  currentStreak.relativeTime = moment(currentStreak.date).fromNow();

  var today = moment().format('YYYY-MM-DD');
  var oneYearAgo = moment(today).subtract(1, 'years');
  posts = posts.filter(function(post) {
    return new Date(post.date) > oneYearAgo;
  });
  var calendar = getCalendar(posts);

  var dateRange = {
    start: moment(oneYearAgo).format('MMM D, YYYY'),
    end: moment().format('MMM D, YYYY')
  }

  var app = new Vue({
    el: '#calendar',
    data: {
      posts: posts,
      selectedDate: null,
      calendar: calendar,
      longestStreak: longestStreak,
      currentStreak: currentStreak,
      dateRange: dateRange,
      mouseoverDate: null,
      moment: moment
    },
    created: function() {
      var isToday = moment().diff(currentStreak.date, 'days') === 0;
      this.selectedDate = isToday ? currentStreak.date : 'none';
    },
    methods: {},
    computed: {
      svgtip: function() {
        var date = this.mouseoverDate;
        var display = date ? 'block' : 'none';
        if (date) {
          var coordinator = getIndexByDate(date);
          var x = coordinator[0];
          var y = coordinator[1];
          var len = this.calendar[x].days[y].posts.length;
          var text = len ? len + ' Posts' : 'No Contribution';
          var left = coordinator[0] * 13 - 69 + 'px';
          coordinator[1] = coordinator[0] ? coordinator[1] : coordinator[1] + oneYearAgo.day();
          var top = coordinator[1] * 13 + 12 + 'px';
        }
        return {
          text: text,
          left: left,
          top: top,
          display: display
        }
      }
    }
  });

  function getCurrentStreak(latestStreak) {
    var isToday = moment().diff(latestStreak.end, 'days') === 0;
    var count = isToday ? latestStreak.count : 0;

    return {
      count: count,
      date: latestStreak.end
    }
  }

  function getCalendar(posts) {
    // raw calendar
    var maxCount = 0;
    var tmr = new Date();
    tmr.setDate(tmr.getDate() + 1);
    var tmrStr = tmr.toISOString().slice(0, 10);
    var date = new Date();
    date.setYear(date.getFullYear() - 1); // start date is a year ago;
    var calendar = [];
    while (date.toISOString().slice(0, 10) !== tmrStr) {
      var day = date.getDay();
      if (day === 0 || calendar.length === 0) {
        var x = calendar.length * 13;
        calendar.push({
          transform: 'translate(' + x + ',0)',
          days: []
        })
      }

      calendar[calendar.length - 1].days.push({
        y: day * 13,
        date: date.toISOString().slice(0, 10),
        posts: []
      });
      date.setDate(date.getDate() + 1);
    }

    // handle post info
    posts.forEach(function(post) {
      var x = getIndexByDate(post.date)[0];
      var y = getIndexByDate(post.date)[1];

      calendar[x].days[y].posts.push({
        title: post.title,
        url: post.url
      });

      var len = calendar[x].days[y].posts.length;
      maxCount = Math.max(len, maxCount);
    })


    // handle fill color
    calendar.forEach(function(week) {
      week.days.forEach(function(day) {
        day.fill = getColorByLength(day.posts.length, maxCount);
      })
    })

    return calendar;
  }

  function getIndexByDate(date) {
    date = moment(date);
    var firstColumnLen = 7 - oneYearAgo.day();
    var days = date.diff(oneYearAgo, 'days');

    var x = days > firstColumnLen - 1 ? Math.ceil((days - firstColumnLen + 1) / 7) : 0;
    var y = days > firstColumnLen - 1 ? date.day() : date.day() - oneYearAgo.day();
    return [x, y];
  }

  function getColorByLength(len, max) {
    var colors = ['#eee', '#d6e685', '#8cc665', '#44a340', '#1e6823'];
    var colorsLen = colors.length - 1;
    var color = len ? colors[0] : colors[1];
    var interval = max / colorsLen;
    if (max < colorsLen) {
      color = colors[len];
    } else {
      color = colors[Math.ceil(len / interval)];
    }
    return color;
  }

</script>

